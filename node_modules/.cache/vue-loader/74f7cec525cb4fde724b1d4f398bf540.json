{"remainingRequest":"/home/peace/Documents/frontend/panel/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/peace/Documents/frontend/panel/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/peace/Documents/frontend/panel/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/peace/Documents/frontend/panel/src/pages/Icons.vue?vue&type=template&id=2a169e26&","dependencies":[{"path":"/home/peace/Documents/frontend/panel/src/pages/Icons.vue","mtime":1606724381000},{"path":"/home/peace/Documents/frontend/panel/node_modules/cache-loader/dist/cjs.js","mtime":1606033327880},{"path":"/home/peace/Documents/frontend/panel/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1607268505414},{"path":"/home/peace/Documents/frontend/panel/node_modules/cache-loader/dist/cjs.js","mtime":1606033327880},{"path":"/home/peace/Documents/frontend/panel/node_modules/vue-loader/lib/index.js","mtime":1607268505414}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}